name: Manual Generate Linux Binary/AppImage
on:
  workflow_dispatch:
    inputs:

      buildVariant:
        type: choice
        description: 'Build Variant'
        required: true
        default: 'release'
        options: 
        - release
        - debug

      cpuArch:
        type: choice
        description: 'CPU Architecture'
        required: true
        default: 'x86_64'
        options: 
        - x86_64
        - x86
        - aarch64
        - armhf
        - armv7
        - riscv64
        - ppc64le
        - s390x

jobs:

  apk:
    name: Generate ${{ github.event.inputs.buildVariant }} ${{ github.event.inputs.cpuArch }} build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Check Valid Version Tags
        id: valid-tags
        shell: bash
        run: |
          echo "count=$(git tag -l 'v[0-9]*' | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Fetch upstream tags # required for git describe to return a valid version and to preevnt androidGitVersion from crashing on a new fork
        if: ${{ steps.valid-tags.outputs.count == '0' }}
        run: |
          # TODO: should try to fetch tags from whereever this repo was forked from before fetching from official repo
          git remote add upstream https://github.com/hrydgard/ppsspp.git # fetching from official repo as a fallback
          git fetch --deepen=15000 --no-recurse-submodules --tags upstream || exit 0
      
      - name: Set up Alpine Linux for ${{ github.event.inputs.cpuArch }} (target arch)
        id: alpine-target
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ github.event.inputs.cpuArch }}
          branch: edge # riscv64 only supported on edge, but LFS64 interfaces (ie. fopen64 and others with 64-bit naming) have been removed since musl 1.2.4 (Alpine 3.19)
          shell-name: alpine-target.sh

      - name: Run script inside Alpine chroot
        run: |
          uname -a
          apk list -i
          apk update
          apk add --upgrade apk-tools
          apk upgrade --available
          apk add build-base wget git bash cmake python3 glu-dev sdl2-dev gcompat
          pwd
          git config --global --add safe.directory "$PWD" # fix dubious ownership issue when running git describe inside a container
          cd ffmpeg # Build a minimal FFMPEG
          rm -f config.h
          set -e

          ARCH="${{ github.event.inputs.cpuArch }}"
          #   --enable-cross-compile \
          #   --cc=mipsel-linux-gcc \
          #   --cxx=mipsel-linux-g++ \
          
          GENERAL="
          	--target-os=linux \
          	--disable-shared \
          	--enable-static"
          
          MODULES="\
             --disable-avdevice \
             --disable-filters \
             --disable-programs \
             --disable-network \
             --disable-avfilter \
             --disable-postproc \
             --disable-encoders \
             --disable-doc \
             --disable-ffplay \
             --disable-ffprobe \
             --disable-ffserver \
             --disable-ffmpeg"
          
          VIDEO_DECODERS="\
             --enable-decoder=h264 \
             --enable-decoder=h263 \
             --enable-decoder=h263p \
             --enable-decoder=mpeg2video"
          
          AUDIO_DECODERS="\
              --enable-decoder=aac \
              --enable-decoder=atrac3 \
              --enable-decoder=atrac3p \
              --enable-decoder=mp3 \
              --enable-decoder=pcm_s16le \
              --enable-decoder=pcm_s8"
            
          DEMUXERS="\
              --enable-demuxer=h264 \
              --enable-demuxer=h263 \
              --enable-demuxer=mpegps \
              --enable-demuxer=mpegvideo \
              --enable-demuxer=avi \
              --enable-demuxer=mp3 \
              --enable-demuxer=aac \
              --enable-demuxer=oma \
              --enable-demuxer=pcm_s16le \
              --enable-demuxer=pcm_s8 \
              --enable-demuxer=wav"
          
          VIDEO_ENCODERS="\
          	  --enable-encoder=huffyuv
          	  --enable-encoder=ffv1
          	  --enable-encoder=mjpeg"
          
          AUDIO_ENCODERS="\
          	  --enable-encoder=pcm_s16le"
          
          MUXERS="\
            	--enable-muxer=avi"
          
          PARSERS="\
              --enable-parser=h264 \
              --enable-parser=mpeg4video \
              --enable-parser=mpegvideo \
              --enable-parser=aac \
              --enable-parser=mpegaudio"

          echo "VIDEO_ENCODERS="${VIDEO_ENCODERS}
          
          ./configure \
              --prefix=./linux/${ARCH} \
              ${GENERAL} \
              --extra-cflags="-D__STDC_CONSTANT_MACROS -O3" \
              --enable-zlib \
          	  --disable-yasm \
              --disable-everything \
              ${MODULES} \
              ${VIDEO_DECODERS} \
              ${AUDIO_DECODERS} \
              ${VIDEO_ENCODERS} \
              ${AUDIO_ENCODERS} \
              ${DEMUXERS} \
              ${MUXERS} \
              ${PARSERS} \
          	  --arch=${ARCH} \
             
          make clean
          make install
          cd .. # End of Build a minimal FFMPEG
          ./b.sh --${{ github.event.inputs.buildVariant }}
        shell: alpine-target.sh --root {0}

      - name: Run script on the Host system
        run: |
          uname -a
          apt list --installed
          pwd
        shell: bash
      
      - name: Package build
        run: |
          find . -name "PPSSPPSDL"
          mkdir ppsspp
          if [ -e android/build/*/apk/*/*/*.apk ]; then
            cp android/build/*/apk/*/*/*.apk ppsspp/
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ github.event.inputs.buildVariant }}-${{ github.event.inputs.cpuArch }} build
          path: ppsspp/
