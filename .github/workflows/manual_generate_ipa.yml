name: Manual Generate Linux Binary/AppImage
on:
  workflow_dispatch:
    inputs:

      buildVariant:
        type: choice
        description: 'Build Variant'
        required: true
        default: 'release'
        options: 
        - release
        - debug

      cpuArch:
        type: choice
        description: 'CPU Architecture'
        required: true
        default: 'x86_64'
        options: 
        - x86_64
        - x86
        - aarch64
        - armhf
        - armv7
        - riscv64
        - ppc64le
        - s390x

      createAppImage:
        type: boolean
        description: 'Create AppImage bundle'
        required: true
        default: true

      runTest:
        type: boolean
        description: 'Run Tests'
        required: true
        default: false

jobs:

  build:
    name: Generate ${{ github.event.inputs.buildVariant }} ${{ github.event.inputs.cpuArch }} build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Check Valid Version Tags
        id: valid-tags
        shell: bash
        run: |
          echo "count=$(git tag -l 'v[0-9]*' | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Fetch upstream tags # required for git describe to return a valid version and to preevnt androidGitVersion from crashing on a new fork
        if: ${{ steps.valid-tags.outputs.count == '0' }}
        run: |
          # TODO: should try to fetch tags from whereever this repo was forked from before fetching from official repo
          git remote add upstream https://github.com/hrydgard/ppsspp.git # fetching from official repo as a fallback
          git fetch --deepen=15000 --no-recurse-submodules --tags upstream || exit 0
      
      - name: Set up Alpine Linux for ${{ github.event.inputs.cpuArch }} (Target arch)
        id: alpine-target
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ github.event.inputs.cpuArch }}
          branch: "${{ github.event.inputs.cpuArch == 'armhf' && 'v3.18' || 'v3.20' }}" # riscv64 only supported on edge (or v3.20+ ?), but LFS64 interfaces (*64 syscall shims like fopen64) have been removed since musl 1.2.4 (Alpine v3.19 or v3.18 ?)
          shell-name: alpine-target.sh

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: linux-${{ github.event.inputs.buildVariant }}-${{ github.event.inputs.cpuArch }}
          create-symlink: true

      - name: Run script inside Alpine chroot
        env:
          CC: gcc # clang
          CXX: g++ # clang++
          USE_CCACHE: 1
        run: |
          uname -a
          apk list -i
          apk update
          apk add --upgrade apk-tools
          apk upgrade --available
          apk add build-base wget git bash cmake python3 glu-dev # sdl2-dev sdl2_ttf-dev fontconfig-dev glew-dev # need to install sdl2 from source when using Alpine v3.18 or older?
          pwd
          # Fix dubious ownership issue when running git describe inside a container
          git config --global --add safe.directory "$PWD"

          # Export ccache env var(s)
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          export CCACHE_SLOPPINESS=clang_index_store,ivfsoverlay,include_file_ctime,include_file_mtime,modules,system_headers,time_macros
        
          # Build SDL2 from source (Apline v3.17 (musl 1.2.3-r5) have SDL2 version 2.26.5-r0 but have directfb.h issue on some arch)
          export SDL_VERSION=2.0.22
          wget https://github.com/libsdl-org/SDL/archive/refs/tags/release-${SDL_VERSION}.tar.gz && \
          tar -xf release-${SDL_VERSION}.tar.gz && cd SDL-release-${SDL_VERSION} && mkdir build && cd build && \
          cmake -DCMAKE_BUILD_TYPE=Release .. && \
          make -j$(getconf _NPROCESSORS_ONLN) clean && \
          make -j$(getconf _NPROCESSORS_ONLN) && \
          make -j$(getconf _NPROCESSORS_ONLN) install
          cd .. && cd ..
          # End of Build SDL2 from source

          # Build a minimal FFMPEG (some arch may get 'fopen64' or 'fcntl64' issue during linking, or tried to link the wrong arch)
          cd ffmpeg
          rm -f config.h
          set -e

          ARCH="${{ github.event.inputs.cpuArch }}"
          #   --enable-cross-compile \
          #   --cc=mipsel-linux-gcc \
          #   --cxx=mipsel-linux-g++ \
          
          GENERAL="
          	--target-os=linux \
          	--disable-shared \
          	--enable-static"
            #--enable-pic \
          
          MODULES="\
             --disable-avdevice \
             --disable-filters \
             --disable-programs \
             --disable-network \
             --disable-avfilter \
             --disable-postproc \
             --disable-encoders \
             --disable-doc \
             --disable-ffplay \
             --disable-ffprobe \
             --disable-ffserver \
             --disable-ffmpeg"
          
          VIDEO_DECODERS="\
             --enable-decoder=h264 \
             --enable-decoder=h263 \
             --enable-decoder=h263p \
             --enable-decoder=mpeg2video"
          
          AUDIO_DECODERS="\
              --enable-decoder=aac \
              --enable-decoder=atrac3 \
              --enable-decoder=atrac3p \
              --enable-decoder=mp3 \
              --enable-decoder=pcm_s16le \
              --enable-decoder=pcm_s8"
            
          DEMUXERS="\
              --enable-demuxer=h264 \
              --enable-demuxer=h263 \
              --enable-demuxer=mpegps \
              --enable-demuxer=mpegvideo \
              --enable-demuxer=avi \
              --enable-demuxer=mp3 \
              --enable-demuxer=aac \
              --enable-demuxer=oma \
              --enable-demuxer=pcm_s16le \
              --enable-demuxer=pcm_s8 \
              --enable-demuxer=wav"
          
          VIDEO_ENCODERS="\
          	  --enable-encoder=huffyuv
          	  --enable-encoder=ffv1
          	  --enable-encoder=mjpeg"
          
          AUDIO_ENCODERS="\
          	  --enable-encoder=pcm_s16le"
          
          MUXERS="\
            	--enable-muxer=avi"
          
          PARSERS="\
              --enable-parser=h264 \
              --enable-parser=mpeg4video \
              --enable-parser=mpegvideo \
              --enable-parser=aac \
              --enable-parser=mpegaudio"

          echo "VIDEO_ENCODERS="${VIDEO_ENCODERS}
          
          ./configure \
              --prefix=./linux/${ARCH} \
              ${GENERAL} \
              --extra-cflags="-D__STDC_CONSTANT_MACROS -O3 -fPIE" \
              --extra-ldflags="-pie" \
              --extra-ldexeflags="-pie" \
              --enable-zlib \
          	  --disable-yasm \
              --disable-everything \
              ${MODULES} \
              ${VIDEO_DECODERS} \
              ${AUDIO_DECODERS} \
              ${VIDEO_ENCODERS} \
              ${AUDIO_ENCODERS} \
              ${DEMUXERS} \
              ${MUXERS} \
              ${PARSERS} \
          	  --arch=${ARCH} \
             
          make clean
          make install
          cd ..
          # End of Build a minimal FFMPEG

          # TODO: riscv64 might have '__riscv_flush_icache' issue, may be need to use a different toolchain?
          ./b.sh --${{ github.event.inputs.buildVariant }}
        shell: alpine-target.sh --root {0}

      - name: Run script on the Host system
        run: |
          uname -a
          apt list --installed
          pwd
        shell: bash
      
      - name: Package Standard Binary build
        if: ${{ !github.event.inputs.createAppImage }}
        run: |
          find . -name "PPSSPPSDL" -exec file {} \;
          mkdir ppsspp
          if [ -e build*/PPSSPPSDL ]; then
            cp build*/PPSSPPSDL ppsspp/
            cp -r assets ppsspp/assets
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ github.event.inputs.buildVariant }}-${{ github.event.inputs.cpuArch }} build
          path: ppsspp/

      - name: Run script inside Alpine chroot (Build Tests)
        if: ${{ github.event.inputs.runTest }}
        #working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          # Build tests
          ./b.sh --headless --unittest
        shell: alpine-target.sh --root {0}

      - name: Package Test build
        run: |
          find . -name "PPSSPPHeadless" -exec file {} \;
          mkdir test
          if [ -e build*/PPSSPPHeadless ]; then
            cp build*/PPSSPPHeadless test/
            cp -r assets test/assets
          fi
          find . -name "PPSSPPUnitTest" -exec file {} \;
          if [ -e build*/PPSSPPUnitTest ]; then
            cp build*/PPSSPPUnitTest test/
          fi

      - name: Upload Test artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ github.event.inputs.buildVariant }}-${{ github.event.inputs.cpuArch }} headless
          path: test/

  test:
    name: Testing ${{ github.event.inputs.buildVariant }} ${{ github.event.inputs.cpuArch }} headless
    if: ${{ github.event.inputs.runTest }}
    continue-on-error: true
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    env:
      CROSS_SYSROOT: /mnt/alpine-${{ github.event.inputs.cpuArch }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
  
      - name: Fetch tests
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        # Doing this to avoid ffmpeg and other large submodules.
        run: git submodule update --init pspautotests assets/lang

      #- name: Set up Alpine Linux for ${{ github.event.inputs.cpuArch }} (Build arch)
      #  id: alpine-build
      #  uses: jirutka/setup-alpine@v1
      #  with:
      #    arch: ${{ github.event.inputs.cpuArch }}
      #    branch: edge
      #    packages: >
      #      build-base
      #      wget
      #      git
      #      bash
      #      cmake
      #      python3
      #      glu-dev
      #    shell-name: alpine-build.sh

      - name: Set up Alpine Linux for ${{ github.event.inputs.cpuArch }} (Test arch)
        id: alpine-test
        uses: jirutka/setup-alpine@v1
        with:
          arch: ${{ github.event.inputs.cpuArch }}
          branch: edge
          packages: >
            sdl2
            libstdc++
            glu-dev
            gcompat
          shell-name: alpine-test.sh

      - name: Download Test build
        uses: actions/download-artifact@v4
        with:
          name: linux-${{ github.event.inputs.buildVariant }}-${{ github.event.inputs.cpuArch }} headless
          path: test/
  
      #- name: Run script inside Alpine chroot (Build Tests)
      #  working-directory: ${{ env.GITHUB_WORKSPACE }}
      #  run: |
      #    uname -a
      #    # Fix dubious ownership issue when running git describe inside a container
      #    git config --global --add safe.directory "$PWD"
      #    
      #    # Build tests
      #    ./b.sh --headless --unittest
      #  shell: alpine-build.sh --root {0}
        
      - name: Fix test permissions
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          #cp `find . -name PPSSPPHeadless` .
          find . -name PPSSPPHeadless
          find . -name PPSSPPHeadless -exec cp "{}" . \;
          chmod +x PPSSPPHeadless
          #cp `find . -name PPSSPPUnitTest` .
          find . -name PPSSPPUnitTest
          find . -name PPSSPPUnitTest -exec cp "{}" . \;
          chmod +x PPSSPPUnitTest
          find . -name PPSSPPHeadless
          find . -name PPSSPPUnitTest
        shell: alpine-test.sh --root {0}
  
      - name: Execute Unit tests
        continue-on-error: true
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          uname -a
          find . -name "PPSSPPUnitTest" -exec file {} \;
          if [ -e ./PPSSPPUnitTest ]; then
            ./PPSSPPUnitTest ALL
          fi
        shell: alpine-test.sh --root {0}
  
      - name: Execute Headless tests
        working-directory: ${{ env.GITHUB_WORKSPACE }}
        run: |
          uname -a
          find . -name PPSSPPHeadless -exec file {} \;
          if [ -e PPSSPPHeadless ]; then
            python test.py -g --graphics=software
          fi
        shell: alpine-test.sh --root {0}
        
